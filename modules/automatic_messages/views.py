"""
Views para la selecci√≥n interactiva de mensajes autom√°ticos
"""

from discord import Interaction, Embed, Color, ButtonStyle
from discord.ui import View, Button
from typing import List, Callable
from .models import AutomaticMessage
from . import constants


class AutomaticMessageSelectView(View):
    """Vista para seleccionar mensajes autom√°ticos con paginaci√≥n"""
    
    def __init__(self, messages: List[AutomaticMessage], callback: Callable, page: int = 0, per_page: int = 20):
        super().__init__(timeout=300)
        self.messages = messages
        self.callback_func = callback
        self.page = page
        self.per_page = per_page
        self.total_pages = (len(messages) + per_page - 1) // per_page
        
        # Obtener los mensajes para la p√°gina actual
        start_idx = page * per_page
        end_idx = start_idx + per_page
        page_messages = messages[start_idx:end_idx]
        
        # Crear botones para cada mensaje de la p√°gina actual
        for message in page_messages:
            button = AutomaticMessageButton(message, self.callback_func)
            self.add_item(button)
        
        # Agregar botones de navegaci√≥n si hay m√∫ltiples p√°ginas
        if self.total_pages > 1:
            self.add_navigation_buttons()
    
    def add_navigation_buttons(self):
        """Agregar botones de navegaci√≥n para paginaci√≥n"""
        # Bot√≥n anterior
        if self.page > 0:
            prev_button = Button(
                label=constants.PAGE_PREVIOUS,
                style=ButtonStyle.secondary,
                emoji="‚¨ÖÔ∏è"
            )
            prev_button.callback = self.previous_page
            self.add_item(prev_button)
        
        # Indicador de p√°gina
        page_button = Button(
            label=constants.PAGE_INDICATOR.format(current=self.page + 1, total=self.total_pages),
            style=ButtonStyle.secondary,
            disabled=True
        )
        self.add_item(page_button)
        
        # Bot√≥n siguiente
        if self.page < self.total_pages - 1:
            next_button = Button(
                label=constants.PAGE_NEXT,
                style=ButtonStyle.secondary,
                emoji="‚û°Ô∏è"
            )
            next_button.callback = self.next_page
            self.add_item(next_button)
    
    async def previous_page(self, interaction: Interaction):
        """Ir a la p√°gina anterior"""
        if self.page > 0:
            new_view = AutomaticMessageSelectView(
                self.messages, 
                self.callback_func, 
                self.page - 1, 
                self.per_page
            )
            embed = create_message_selection_embed(self.messages, self.page - 1, self.per_page)
            await interaction.response.edit_message(embed=embed, view=new_view)
    
    async def next_page(self, interaction: Interaction):
        """Ir a la p√°gina siguiente"""
        if self.page < self.total_pages - 1:
            new_view = AutomaticMessageSelectView(
                self.messages, 
                self.callback_func, 
                self.page + 1, 
                self.per_page
            )
            embed = create_message_selection_embed(self.messages, self.page + 1, self.per_page)
            await interaction.response.edit_message(embed=embed, view=new_view)


class AutomaticMessageButton(Button):
    """Bot√≥n para seleccionar un mensaje autom√°tico espec√≠fico"""
    
    def __init__(self, message: AutomaticMessage, callback: Callable):
        # Crear label usando el nombre si est√° disponible, sino usar ID truncado
        if message.name:
            label = f"üè∑Ô∏è {message.name}"
        else:
            # Usar informaci√≥n del canal/categor√≠a como fallback
            if message.channel_id:
                label = f"üì¢ {message.id[:8]}..."
            else:
                label = f"üìÅ {message.id[:8]}..."
        
        super().__init__(
            label=label[:80],  # Discord limita a 80 caracteres
            style=ButtonStyle.primary,
            custom_id=message.id
        )
        self.message = message
        self.callback_func = callback
    
    async def callback(self, interaction: Interaction):
        """Ejecutar el callback con el mensaje seleccionado"""
        await self.callback_func(interaction, self.message)


def create_message_selection_embed(messages: List[AutomaticMessage], page: int = 0, per_page: int = 20) -> Embed:
    """Crear embed para la selecci√≥n de mensajes autom√°ticos"""
    embed = Embed(
        title=constants.VIEW_SELECT_MESSAGE_TITLE,
        description=constants.VIEW_SELECT_MESSAGE_DESC,
        color=Color.blue()
    )
    
    # Agregar informaci√≥n de paginaci√≥n si hay m√∫ltiples p√°ginas
    total_pages = (len(messages) + per_page - 1) // per_page
    if total_pages > 1:
        embed.set_footer(text=constants.PAGE_INFO.format(
            current=page + 1,
            total=total_pages,
            showing=min(per_page, len(messages) - page * per_page),
            total_items=len(messages)
        ))
    
    return embed
